<?xml version='1.0' encoding='gb2312'?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
        <property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3307/test</property>
        <!--数据库连接池的大小-->
        <property name="hibernate.connection.pool.size">50 </property>
        <!--显示SQL语句-->
        <property name="hibernate.show_sql">true </property>
        <!--格式化sql语句-->
        <property name="format_sql">true</property>
        <!--jdbc.fetch_size是指Hibernate每次从数据库中取出并放到JDBC的Statement中的记录条数。Fetch Size设的越大，读数据库的次数越少，速度越快，Fetch Size越小，读数据库的次数越多，速度越慢-->
        <property name="jdbc.fetch_size">50 </property>
        <!--jdbc.batch_size是指Hibernate批量插入,删除和更新时每次操作的记录数。Batch Size越大，批量操作的向数据库发送Sql的次数越少，速度就越快，同样耗用内存就越大-->
        <property name="jdbc.batch_size">23 </property>
        <!--jdbc.use_scrollable_resultset是否允许Hibernate用JDBC的可滚动的结果集。对分页的结果集。对分页时的设置非常有帮助-->
        <property name="jdbc.use_scrollable_resultset">false </property>
        <!--connection.useUnicode连接数据库时是否使用Unicode编码-->
        <property name="Connection.useUnicode">true </property>
        <!--connection.characterEncoding连接数据库时数据的传输字符集编码方式，最好设置为gbk，用gb2312有的字符不全-->
        <property name="connection.characterEncoding">utf-8 </property>

        <!--hibernate.dialect 只是Hibernate使用的数据库方言,就是要用Hibernate连接那种类型的数据库服务器。-->
        <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect </property>
        <mapping class="cn.myapps.bean.TCallRateEntity"/>
        <!--指定映射文件为“hibernate/ch1/UserInfo.hbm.xml”-->
    </session-factory>
</hibernate-configuration>



    <!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">-->
        <!--<property name="driverClassName" value="${jdbc.driverClassName}" />-->
        <!--<property name="url" value="${jdbc.url}" />-->
        <!--<property name="username" value="${jdbc.username}" />-->
        <!--<property name="password" value="${jdbc.password}" />-->
    <!--</bean>-->

<!--<bean id="hbSessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">-->
    <!--<property name="dataSource" ref="dataSource" />-->
    <!--<property name="configLocation">-->
        <!--<value>WEB-INF/hibernate.cfg.xml </value>-->
    <!--</property>-->
    <!--<property name="configurationClass" value="org.hibernate.cfg.AnnotationConfiguration" />-->
    <!--<property name="hibernateProperties">-->
        <!--<props>-->
            <!--<prop key="hibernate.dialect">-->
                <!--org.hibernate.dialect.OracleDialect-->
            <!--</prop>-->
            <!--<prop key="hibernate.query.factory_class">-->
                <!--org.hibernate.hql.ast.ASTQueryTranslatorFactory-->
            <!--</prop>-->
            <!--<prop key="hibernate.show_sql">true </prop>-->
            <!--<prop key="hibernate.use_outer_join">true </prop>-->
            <!--&lt;!&ndash;//默认打开，启用cglib反射优化。cglib是用来在Hibernate中动态生成PO字节码的，打开优化可以加快字节码构造的速度&ndash;&gt;-->
            <!--<prop key="hibernate.cglib.use_reflection_optimizer">true </prop>-->
            <!--&lt;!&ndash;//输出格式化后的sql,更方便查看&ndash;&gt;-->
            <!--<prop key="hibernate.format_sql">true </prop>-->
            <!--&lt;!&ndash;//“useUnicode”和“characterEncoding”决定了它是否在客户端和服务器端传输过程中进行Encode，以及如何进行Encode&ndash;&gt;-->
            <!--<prop key="hibernate.connection.useUnicode">true </prop>-->
            <!--&lt;!&ndash;//允许查询缓存, 个别查询仍然需要被设置为可缓存的.&ndash;&gt;-->
            <!--<prop key="hibernate.cache.use_query_cache">false </prop>-->
            <!--<prop key="hibernate.default_batch_fetch_size">16 </prop>-->
            <!--&lt;!&ndash;//连接池的最大活动个数&ndash;&gt;-->
            <!--<prop key="hibernate.dbcp.maxActive">100 </prop>-->
            <!--&lt;!&ndash;//当连接池中的连接已经被耗尽的时候，DBCP将怎样处理(0 = 失败,1 = 等待,2  =  增长)&ndash;&gt;-->
            <!--<prop key="hibernate.dbcp.whenExhaustedAction">1 </prop>-->
            <!--&lt;!&ndash;//最大等待时间&ndash;&gt;-->
            <!--<prop key="hibernate.dbcp.maxWait">1200 </prop>-->
            <!--&lt;!&ndash;//没有人用连接的时候，最大闲置的连接个数&ndash;&gt;-->
            <!--<prop key="hibernate.dbcp.maxIdle">10 </prop>-->
            <!--&lt;!&ndash;##以下是对prepared statement的处理，同上。&ndash;&gt;-->
            <!--<prop key="hibernate.dbcp.ps.maxActive">100 </prop>-->
            <!--<prop key="hibernate.dbcp.ps.whenExhaustedAction">1 </prop>-->
            <!--<prop key="hibernate.dbcp.ps.maxWait">1200 </prop>-->
            <!--<prop key="hibernate.dbcp.ps.maxIdle">10 </prop>-->
        <!--</props>-->
    <!--</property>-->
<!--</bean>-->